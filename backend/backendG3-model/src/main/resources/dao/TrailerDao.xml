<?xml version="1.0" encoding="UTF-8"?>
<JdbcEntitySetup
        xmlns="http://www.ontimize.com/schema/jdbc"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd"
        catalog="" schema="${mainschema}" table="trailer"
        datasource="mainDataSource" sqlhandler="dbSQLStatementHandler">
    <DeleteKeys>
        <Column>id_trailer</Column>
    </DeleteKeys>
    <UpdateKeys>
        <Column>id_trailer</Column>
    </UpdateKeys>
    <GeneratedKey>id_trailer</GeneratedKey>
    <Queries>
        <Query id="datatrailer">
            <AmbiguousColumns>
                <AmbiguousColumn name="id_trailer" prefix="t" databaseName="id_trailer" />
            </AmbiguousColumns>
            <Sentence>
                <![CDATA[
                      SELECT tra.id_trailer, tra.trailer_plate AS trailer_plate
                      FROM PUBLIC.Trailer tra
                      #WHERE#
                      GROUP BY tra.id_trailer, tra.trailer_plate
                      ORDER by tra.id_trailer;
                ]]>
            </Sentence>
        </Query>
        <Query id="detailstrailer">
            <Sentence>
                <![CDATA[
                    SELECT #COLUMNS#
                    FROM DATATRAILERS
                    #WHERE#
                    #ORDER#
                ]]>
            </Sentence>
        </Query>

        <Query id="datacolumnsincrementtrailer">
            <Sentence>
                <!-- 2Âª opcion
                 select count(s.id_truck) as viajes_completados,
                 sum(s.scan_volume_in + s.scan_volume_out) as total_carga,
                 count(s.scan_volume_in) filter (where s.scan_volume_in > s.scan_volume_out) as viajes_carga,
                 count(s.scan_volume_out) filter (where s.scan_volume_in <= s.scan_volume_out) as viajes_descarga,
                 t.plate ,
                 t.id_truck,
                 SUM(s.scan_volume_out) filter (where s.scan_volume_in > s.scan_volume_out) as total_cargado,
                 SUM(s.scan_volume_in) filter (where s.scan_volume_in <= s.scan_volume_out) as total_descargado
                 from scan s
                 left join truck t on s.id_truck = t.id_truck
                 where s.scan_volume_in is not null and s.scan_volume_out is not null
                 group by s.id_truck, t.plate, t.id_truck
                 order by s.id_truck;
                -->
                <![CDATA[
                WITH tr_consulta_nuevas_columnas AS (
                      select count(s.id_trailer) as viajes_completados,
                        sum(abs(s.scan_volume_in - s.scan_volume_out)) as total_carga,
                        count(s.scan_volume_in) filter (where s.scan_volume_in > s.scan_volume_out) as viajes_carga,
                        count(s.scan_volume_out) filter (where s.scan_volume_in <= s.scan_volume_out) as viajes_descarga,
                        tr.trailer_plate,
                        tr.id_trailer,
                        COALESCE(SUM(abs(s.scan_volume_in - s.scan_volume_out)) filter (where s.scan_volume_in > s.scan_volume_out), 0) as total_cargado,
                        COALESCE(SUM(abs(s.scan_volume_in - s.scan_volume_out)) filter (where s.scan_volume_in <= s.scan_volume_out), 0) as total_descargado
                     from scan s
                        left join trailer tr on s.id_trailer = tr.id_trailer
                     where s.scan_volume_in is not null and s.scan_volume_out is not null
                     group by s.id_trailer, tr.trailer_plate, tr.id_trailer
                     order by s.id_trailer
                )
                SELECT #COLUMNS#
                FROM tr_consulta_nuevas_columnas
                #WHERE#
                ]]>
            </Sentence>
        </Query>
    </Queries>
</JdbcEntitySetup>